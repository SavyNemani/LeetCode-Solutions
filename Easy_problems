Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution:


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        result = []
        my_map = dict()
        for i in range(len(nums)):
            my_map[nums[i]] = i
        for i in range(len(nums)):  
            diff = target - nums[i]
            j = my_map.get(diff)
            if j != None and j != i:
                result.append(j)
                result.append(i)
                break
               
        return(result)

slighty more optimal solution:


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        my_map = dict()
           
        for i in range(len(nums)):  
            diff = target - nums[i]
            if diff not in my_map:
                my_map[nums[i]] = i
            else:
                return([my_map.get(diff),i])

More optimal solution:


class Solution(object):
    def twoSum(self, nums, target):
      my_map = dict()
      lngth = len(nums)
      for i in range(lngth):
        diff = target - nums[i]
        if diff not in my_map:
          my_map[nums[i]] = i
        else:
          return([my_map.get(diff) , i ])
        diff = target - nums[lngth-1 -i]
        if diff not in my_map:
          my_map[nums[lngth-1-i]] = lngth-1-i
        else:
          return([my_map.get(diff) , lngth-1-i ])
        

twoSum II:

Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

Solution:


class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        my_map = dict()
           
        for i in range(len(numbers)):  
            diff = target - numbers[i]
            if diff not in my_map:
                my_map[numbers[i]] = i
            else:
                return([my_map.get(diff) + 1, i + 1])
               
Given a 32-bit signed integer, reverse digits of an integer.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Solution:


class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        max = (2 ** 31) - 1
        min = -1*(2 ** 31)
        sign_str = '-' if x < 0 else ''
        numStr = str(abs(x))
        reverseStr = sign_str + numStr[len(numStr) - 1::-1]
        if int(reverseStr) < max and int(reverseStr) > min:
            return(int(reverseStr))
        else: 
            return(0)

Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

Solution:

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        #numStr = str(x)
        #reverseStr = numStr[len(numStr) - 1::-1]
        #return((numStr == reverseStr))
        return((str(x) == str(x)[::-1]))


class Solution(object):
    def isPalindrome(self, x):
        if x < 0 :
             return False
        nbr_str = str(x)
        lngth = len(nbr_str)
        halflngth = int((lngth/2))
        print(halflngth)
        if (lngth%2 == 0) :
            return(nbr_str[lngth-1:halflngth-1:-1] == nbr_str[:halflngth:])
        else :
            return(nbr_str[lngth-1:halflngth:-1] == nbr_str[:halflngth:])


Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: "III"
Output: 3
Example 2:

Input: "IV"
Output: 4
Example 3:

Input: "IX"
Output: 9
Example 4:

Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 5:

Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

Solution:

class Solution(object):
    def romanToInt(self, x):
        romNum = dict()
        romNum['I'] = 1
        romNum['II'] = 2
        romNum['III'] = 3
        romNum['IV'] = 4
        romNum['V'] = 5
        romNum['IX'] = 9
        romNum['X'] = 10
        romNum['XL'] = 40
        romNum['L'] = 50
        romNum['XC'] = 90
        romNum['C'] = 100
        romNum['CD'] = 400
        romNum['D'] = 500
        romNum['CM'] = 900
        romNum['M'] = 1000
        
        incr = dict()
        
        incr['I'] = 1
        incr['II'] = 2
        incr['III'] = 3
        incr['IV'] = 2
        incr['V'] = 1
        incr['IX'] = 2
        incr['X'] = 1
        incr['XL'] = 2
        incr['L'] = 1
        incr['XC'] = 2
        incr['C'] = 1
        incr['CD'] = 2
        incr['D'] = 1
        incr['CM'] = 2
        incr['M'] = 1
        
        strlen = len(x)
        i = 0
        nbr = 0
        while i < strlen :
            curstr = x[i]

            if x[i] == 'I' :
            
                if i+1 < strlen and (x[i+1] == 'V' or x[i+1] == 'X' or x[i+1] == 'I'):
                    curstr = curstr + x[i+1]
                if i+2 < strlen and x[i+2] == 'I'  and x[i+1] == 'I' :
                    curstr = curstr + x[i+2]
                    
            if x[i] == 'X' :
                if i+1 < strlen and (x[i+1] == 'C' or x[i+1] == 'L') :
                    curstr = curstr + x[i+1]
            if x[i] == 'C' :
                if i+1 < strlen and (x[i+1] == 'D' or x[i+1] == 'M'):
                 curstr = curstr + x[i+1] 
                
            nbr += romNum.get(curstr)
            i += incr.get(curstr)
            
        return(nbr)
more optimal solution:

class Solution(object):
    def romanToInt(self, s):
        romNum = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        intNum = 0
        prev = 0
        for i in s[::-1]:
            if prev <= romNum[i]:
                intNum += romNum[i]
            else:
                intNum -= romNum[i]
            prev = romNum[i]
        return(intNum)

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
Note:

All given inputs are in lowercase letters a-z.

Solution:

class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        commonPre = ""
        if strs == []:
            return ""
        min = strs[0]
        for i in strs:
            if len(i) < len(min):
                min = i
        for i in range(len(min)):
            for j in range(len(strs)):
                if strs[0][i] != strs[j][i]:
                    return commonPre
            commonPre += strs[0][i]
        return(commonPre)

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

solution:
Time Complexity : O(n)
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        curr = result = ListNode(0)
        while(l1 or l2):
            if l1 != None and l2 != None:
                if l1.val <= l2.val:
                    curr.next = ListNode(l1.val)
                    l1 = l1.next
                    curr = curr.next
                elif l1.val >= l2.val:
                    curr.next = ListNode(l2.val)
                    l2 = l2.next
                    curr = curr.next
            elif l1 == None:
                curr.next = ListNode(l2.val)
                l2 = l2.next
                curr = curr.next
            else:
                curr.next = ListNode(l1.val)
                l1 = l1.next
                curr = curr.next
        return(result.next)

Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Solution:

class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return(len(nums))
        
        curVal = nums[0]
        i = 1

        while i < len(nums) :
            if  curVal == nums[i]:
                nums.pop(i)
            else:
                curVal = nums[i]
                i+=1
                
        return(len(nums))

Without using pop method:
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return(len(nums))
        
        curVal = nums[0]
        removed = 0
        for i in range(1, len(nums)) :
            
            nums[i - removed] = nums[i]
            
            if  curVal != nums[i]:
                curVal = nums[i]
            else:
                removed +=1
             
                
        return(len(nums) - removed)

Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Solution:

class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if len(nums) == 0:
            return(0)
        i = 0
        while(i < len(nums)):
            if val == nums[i]:
                nums.pop(i)
            else:
                i+=1
                
        return(len(nums))

Without using pop method:
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if len(nums) == 0:
            return(0)
        i = 0
        size = 0
        while(i < len(nums)):
            if val != nums[i]:
                nums[size] = nums[i]
                size+=1
            i+=1
                
        return(size)

Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

solution:

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        l1 = len(haystack)
        l2 = len(needle)
        
        if l2 < 1:
            return(0)
        i = 0
        rtnval = -1
        while(1):
            if i + l2 > l1:
                break
            else:
                if(needle == haystack[i:i+l2:1]):
                    rtnval = i
                    break
            i += 1
        return(rtnval)

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0

solution:
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        i = 0
        result = 0
        if target > nums[len(nums) - 1]:
            return(len(nums))
        while(i < len(nums)):
            if nums[i] >= target:
                result = i
                break
            i += 1
        return(result)

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

solution:

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums)
        dp[0] = nums[0]
        global_max = dp[0]
        
        for i in range(1, len(dp)):
            if dp[i - 1] > 0:
                dp[i] = dp[i - 1] + nums[i]
            else:
                dp[i] = nums[i]
            
            global_max = max(global_max, dp[i])
            
        return global_max;

Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

Note: A word is defined as a character sequence consists of non-space characters only.

Example:

Input: "Hello World"
Output: 5

Solution:

class Solution(object):
    def lengthOfLastWord(self, s):
        """
        :type s: str
        :rtype: int
        """
        if  s[::1] == " ":
            return(0)
        size = 0
        split_list=s.split()
        for i in range(len(split_list)):
            if i == len(split_list) - 1:
                size = len(split_list[i])
        return(size)

Another solution:
class Solution(object):

    def lengthOfLastWord(self, s):
        """
        :type s: str
        :rtype: int
        """
        temp = ''
        strarr = []
        allspaces = True
        for x in s :
            if x != ' ' :
                allspaces = False
                temp = temp + x
            else :
                if temp != '' :
                    strarr.append(temp)
                temp = ''
        if temp != '' :
            strarr.append(temp)
        if allspaces :
            return(0)
        return(len(strarr[len(strarr) -1]))

Given a non-empty array of digits representing a non-negative integer, plus one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.

Example 1:

Input: [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Example 2:

Input: [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.

Solution:
class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        
        carry = 1
        
        for i in range(len(digits)-1, -1, -1):
            digit = digits[i] + carry
            num = digit % 10
            carry = digit // 10
            digits[i] = num
            if i == 0 and carry != 0:
                digits = [carry] + digits
            
        return digits

Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.

Solution:

class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        result = x ** (0.5)
        return(int(result))

Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"

Solution:

class Solution(object):
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        bSum = bin(int(a,2) + int(b,2))
        return(bSum[2::])

another Solution:

class Solution(object):
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        a = a[::-1]
        b = b[::-1]
        int_a = 0
        int_b = 0
        for i in range(len(a)):
            int_a += int(a[i])*2**i
        for i in range(len(b)):
            int_b += int(b[i])*2**i
        bSum = bin(int_a + int_b)
        return(bSum[2::])

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Solution:

class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        result = []
        result.append(1)
        result.append(2)
        length = n
        tmp = 0
        if n == 0 or n == 1:
            return(1)
        i = 2
        while i < length:
            tmp = result[i - 1] + result[i - 2]
            result.append(tmp)
            i += 1
        return(result[len(result) - 1])
Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3

solution:

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None:
            return(head)
        curr = head
        prev = curr
        curr_val = head.val
        curr = curr.next
        while(curr):
            if curr.val == curr_val:
                prev.next = curr.next
            else:
                curr_val = curr.val
                prev = curr
            curr = curr.next
        return(head)

Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false

solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if not p and not q:
            return(True)
        if p and not q or not p and q:
            return(False)
        if p.val != q.val:
            return(False)
        return (self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right) )

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3

solution:

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def check(p,q):
		    # only one node is present
            if p and not q or q and not p:
                return(False)
			# both nodes are present
            if p and q:
                if p.val == q.val:
                    return(check(p.left,q.right) and check(p.right,q.left))
			# both are none
            return(p == q) # (p == q also works)
        
        return check(root,root)

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

Solution:

class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return(0)
        else:
            l_depth = self.maxDepth(root.left)
            r_depth = self.maxDepth(root.right)
            max_depth = max(l_depth, r_depth) + 1
        return(max_depth)

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return 
        res = self.level(root, 0, [])
        ans = []
        for i in res[::-1]:
            if i != []:
                ans.append(i)
        ans.append([root.val])
        return ans

    def level(self, node, n, res):
        n += 1
        res.append([])
        if node.left:
            self.level(node.left, n, res)
            res[n-1].append(node.left.val)
        if node.right:
            self.level(node.right, n, res)
            res[n-1].append(node.right.val)
        return res

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

 Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        if not nums:
            return(None)
        mid = len(nums) / 2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid + 1:])
        return(root)

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def height(root):
            flag = False
            if root == None:
                return (0, True)
            left_h, l_flag = height(root.left)
            right_h, r_flag = height(root.right)

            if abs(left_h - right_h) <=1 and (l_flag and r_flag):
                flag = True
            return (left_h +1, flag) if left_h > right_h else (right_h+1, flag)
        
        h,flag = height(root)
        return(flag)

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return(0)
        else:
            if root.left and not root.right:
                return(self.minDepth(root.left) + 1)
            if root.right and not root.left:
                return(self.minDepth(root.right) + 1)
            l_depth = self.minDepth(root.left)
            r_depth = self.minDepth(root.right)
            min_depth = min(l_depth, r_depth) + 1
        return(min_depth)

Another Solution:

from collections import deque
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        queue = deque([(root, 1)])
        while queue:
            curr, depth = queue.popleft()
            if not curr.left and not curr.right:
                return depth
            if curr.left:
                queue.append((curr.left, depth+1))
            if curr.right:
                queue.append((curr.right, depth+1))

Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if root is None:
            return(False)
        def checkTreeSum(node, currSum, Sum):
            currSum += node.val
            if node.left == None and node.right == None:
                if currSum == Sum:
                    return(True)
                else:
                    return(False)
            if node.left:
                if(checkTreeSum(node.left, currSum, Sum)):
                    return(True)
            if node.right:
                if(checkTreeSum(node.right, currSum, Sum)):
                    return(True)
        if(checkTreeSum(root, 0, sum)):
            return(True)
        return(False)

Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

solution:

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        result = []
        for line in range(0,numRows):
            t = [1]
            if line>0:
                for i in range(0,line-1):
                    t.append(result[line-1][i]+result[line-1][i+1])
                t.append(1)
            result.append(t)
        return(result)

Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.

Note that the row index starts from 0.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 3
Output: [1,3,3,1]
Follow up:

Could you optimize your algorithm to use only O(k) extra space?

Solution:

class Solution(object):
    def getRow(self, rowIndex):
        """
        :type rowIndex: int
        :rtype: List[int]
        """
        res = []
        for line in range(0, rowIndex + 1):
            t = [1]
            if line > 0:
                for i in range(0, line - 1):
                    t.append(res[line - 1][i] + res[line - 1][i + 1])
                t.append(1)
            res.append(t)
        print(res)
        return(res[rowIndex])

Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false

Solution:

class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        s = ''.join(e for e in s if e.isalnum()).lower()
        return(s == s[::-1])

Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution:

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        max_profit = 0
        if len(prices) == 0:
            return(0)
        currSum = 0
        tmp = prices[0]
        for i in prices[1:]:        
            currSum = i - tmp
            max_profit = max(max_profit, currSum)
            if i < tmp:
                tmp = i
        
        return(max_profit)

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution:

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        return(sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1)))
    
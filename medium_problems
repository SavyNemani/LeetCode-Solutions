Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if root == None:
            return
        queue = [(root,0)]
        result = []
        curr_level = []
        prev_level = 0
        
        
        while len(queue) > 0:
            node,level = queue.pop(0)
            if node == None:
                continue
            if level > prev_level:
                result.append(curr_level[:])
                curr_level = []
                prev_level = level
            curr_level.append(node.val)
            queue.append((node.left, level + 1))
            queue.append((node.right, level + 1))
        
        if root != None:
            result.append(curr_level[:])
  
        return(result)

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if root == None:
            return
        queue = [(root,0)]
        result = []
        curr_level = []
        prev_level = 0
        ctr = 1
        
        while len(queue) > 0:
            node,level = queue.pop(0)
            if node == None:
                continue
            if level > prev_level:
                if ctr % 2 == 0:
                    result.append(curr_level[::-1])
                else:
                    result.append(curr_level[:])
                curr_level = []
                prev_level = level
                ctr += 1
            curr_level.append(node.val)
            queue.append((node.left, level + 1))
            queue.append((node.right, level + 1))
        
        if root != None and ctr % 2 == 0:
            result.append(curr_level[::-1])
        else:
            result.append(curr_level[:])
  
        return(result)

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if len(preorder) == 0:
            return None
        # first element in predorder is root, then find the root index in inorder
        # whatever comes before root in inorder is left subtree
        # whatever comes after root in inorder is right subtree
        # do this recirsively 
        root = TreeNode(preorder[0])
        inorder_root_idx = inorder.index(preorder[0])
        left_len = inorder_root_idx
        root.left = self.buildTree(preorder[1:(1+left_len)], inorder[0:inorder_root_idx])
        root.right = self.buildTree(preorder[1+left_len:], inorder[inorder_root_idx+1:])
        return(root)

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        if len(postorder) == 0:
            return None
        root = TreeNode(postorder[len(postorder) - 1])
        inorder_root_idx = inorder.index(postorder[-1])
        root.left = self.buildTree(inorder[0:inorder_root_idx],postorder[:inorder_root_idx])
        root.right = self.buildTree( inorder[inorder_root_idx+1:],postorder[inorder_root_idx:-1])
        return(root)

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5   

Solution:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if head == None:
            return
        if head.next == None:
            return(TreeNode(head.val))
        lst = []
        while(head != None):
            lst.append(head.val)
            head = head.next
        return(self.buildBST(lst, 0, len(lst) - 1, (len(lst) - 1 )/ 2 ))
    
    def buildBST(self,lst,start, end, index):
        if(start > end):
            return
        node = TreeNode(lst[index])
        node.left = self.buildBST(lst, start, index - 1, (start + index -1)/ 2)
        node.right = self.buildBST(lst, index + 1, end, (index + 1 + end)/ 2)
        return(node)


Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

Solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        result = []
        path = []
        n = 0
        self.dfs(root,n,sum, result, list(path))
        return(result)
        
    def dfs(self, node,currSum, Sum, result, path):
        if node == None:
            return
        path.append(node.val)
        currSum += node.val
        if(node.left == None and node.right == None):
            if(currSum == Sum):
                result.append(path)
        else:
            if node.left:
                self.dfs(node.left,currSum, Sum, result, list(path))
            if node.right:
                self.dfs(node.right,currSum, Sum, result,list(path))


Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Solution:
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        for i in range(1, len(triangle)):
            for j in range(len(triangle[i])):
                if j == 0:
                    triangle[i][0] += triangle[i - 1][0]
                elif j == len(triangle[i]) - 1:
                    triangle[i][j] += triangle[i - 1][-1]
                else:
                    triangle[i][j] += min(triangle[i - 1][j-1], triangle[i - 1][j])
        return(min(triangle[-1]))

Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

Solution: 
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        record = {}
        for i in nums:
            if i not in record.keys():
                record[i] = 1
            else:
                record[i] += 1
        for i, freq in record.items():
            if freq == 1:
                return(i)  

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

Solution:

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0:
            return 0
        map = {}
        max_length = start = 0
        
        for i in range(len(s)):
            if s[i] in map and start <= map[s[i]]:
                start = map[s[i]] + 1
                
            else:
                max_length = max(max_length, i - start + 1)
            map[s[i]] = i
        return(max_length)

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

Solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        if root == None:
            return
        self.flatten(root.left)
        self.flatten(root.right)
        left = root.left
        right = root.right
        if root.left != None:
            root.left = None
            root.right = left
            while root.right != None:
                root = root.right
            root.right = right

There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.

Note:

If there exists a solution, it is guaranteed to be unique.
Both input arrays are non-empty and have the same length.
Each element in the input arrays is a non-negative integer.
Example 1:

Input: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

Output: 3

Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: 
gas  = [2,3,4]
cost = [3,4,3]

Output: -1

Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.

Solution:
class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """
        index = -1
        total = 0
        acc = 0
        for i in range(len(gas)):
            diff = gas[i] - cost[i]
            total += diff
            if index == -1 and diff >= 0:
                index = i
                acc = diff
            elif index != -1:
                acc += diff
                if acc < 0:
                    index = -1
                    acc = 0
        if total < 0:
            return(-1)
        else:
            return(index)

